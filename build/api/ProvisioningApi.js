/**
 * Pydio API V2
 * Access to a Pydio Server. Second version of the API.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _modelAdminWorkspace = require('../model/AdminWorkspace');

var _modelAdminWorkspace2 = _interopRequireDefault(_modelAdminWorkspace);

var _modelMetaSourceParameters = require('../model/MetaSourceParameters');

var _modelMetaSourceParameters2 = _interopRequireDefault(_modelMetaSourceParameters);

var _modelNodeList = require('../model/NodeList');

var _modelNodeList2 = _interopRequireDefault(_modelNodeList);

var _modelPeoplePatch = require('../model/PeoplePatch');

var _modelPeoplePatch2 = _interopRequireDefault(_modelPeoplePatch);

var _modelPydioResponse = require('../model/PydioResponse');

var _modelPydioResponse2 = _interopRequireDefault(_modelPydioResponse);

var _modelRole = require('../model/Role');

var _modelRole2 = _interopRequireDefault(_modelRole);

/**
* Provisioning service.
* @module api/ProvisioningApi
* @version 2.0.0
*/

var ProvisioningApi = (function () {

  /**
  * Constructs a new ProvisioningApi. 
  * @alias module:api/ProvisioningApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */

  function ProvisioningApi(apiClient) {
    _classCallCheck(this, ProvisioningApi);

    this.apiClient = apiClient || _ApiClient2['default'].instance;
  }

  /**
   * Add a metasource 
   * @param {String} workspaceId id or alias of this workspace
   * @param {String} metaId plugin id for new meta
   * @param {module:model/MetaSourceParameters} parameters Meta source parameters
   * @param {Object} opts Optional parameters
   * @param {String} opts.format Format produced in output (defaults to xml)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PydioResponse} and HTTP response
   */

  _createClass(ProvisioningApi, [{
    key: 'adminAddWorkspaceFeatureWithHttpInfo',
    value: function adminAddWorkspaceFeatureWithHttpInfo(workspaceId, metaId, parameters, opts) {
      opts = opts || {};
      var postBody = parameters;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling adminAddWorkspaceFeature");
      }

      // verify the required parameter 'metaId' is set
      if (metaId === undefined || metaId === null) {
        throw new Error("Missing the required parameter 'metaId' when calling adminAddWorkspaceFeature");
      }

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling adminAddWorkspaceFeature");
      }

      var pathParams = {
        'workspaceId': workspaceId,
        'metaId': metaId
      };
      var queryParams = {
        'format': opts['format']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = _modelPydioResponse2['default'];

      return this.apiClient.callApi('/admin/workspaces/{workspaceId}/features/{metaId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Add a metasource 
     * @param {String} workspaceId id or alias of this workspace
     * @param {String} metaId plugin id for new meta
     * @param {module:model/MetaSourceParameters} parameters Meta source parameters
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PydioResponse}
     */
  }, {
    key: 'adminAddWorkspaceFeature',
    value: function adminAddWorkspaceFeature(workspaceId, metaId, parameters, opts) {
      return this.adminAddWorkspaceFeatureWithHttpInfo(workspaceId, metaId, parameters, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create a workspace from scratch by posting JSON data 
     * @param {module:model/AdminWorkspace} payload Repository details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminWorkspace} and HTTP response
     */
  }, {
    key: 'adminCreateWorkspaceWithHttpInfo',
    value: function adminCreateWorkspaceWithHttpInfo(payload) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling adminCreateWorkspace");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = _modelAdminWorkspace2['default'];

      return this.apiClient.callApi('/admin/workspaces', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Create a workspace from scratch by posting JSON data 
     * @param {module:model/AdminWorkspace} payload Repository details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminWorkspace}
     */
  }, {
    key: 'adminCreateWorkspace',
    value: function adminCreateWorkspace(payload) {
      return this.adminCreateWorkspaceWithHttpInfo(payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Load detail of a workspace 
     * @param {String} workspaceId Id or Alias / Load detail of this workspace
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PydioResponse} and HTTP response
     */
  }, {
    key: 'adminDeleteWorkspaceWithHttpInfo',
    value: function adminDeleteWorkspaceWithHttpInfo(workspaceId) {
      var postBody = null;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling adminDeleteWorkspace");
      }

      var pathParams = {
        'workspaceId': workspaceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = _modelPydioResponse2['default'];

      return this.apiClient.callApi('/admin/workspaces/{workspaceId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Load detail of a workspace 
     * @param {String} workspaceId Id or Alias / Load detail of this workspace
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PydioResponse}
     */
  }, {
    key: 'adminDeleteWorkspace',
    value: function adminDeleteWorkspace(workspaceId) {
      return this.adminDeleteWorkspaceWithHttpInfo(workspaceId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * NOT IMPLEMENTED YET - Edit details of a workspace 
     * @param {String} workspaceId Id or Alias / Update details for this workspace
     * @param {module:model/AdminWorkspace} payload Repository details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminWorkspace} and HTTP response
     */
  }, {
    key: 'adminEditWorkspaceWithHttpInfo',
    value: function adminEditWorkspaceWithHttpInfo(workspaceId, payload) {
      var postBody = payload;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling adminEditWorkspace");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling adminEditWorkspace");
      }

      var pathParams = {
        'workspaceId': workspaceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = _modelAdminWorkspace2['default'];

      return this.apiClient.callApi('/admin/workspaces/{workspaceId}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * NOT IMPLEMENTED YET - Edit details of a workspace 
     * @param {String} workspaceId Id or Alias / Update details for this workspace
     * @param {module:model/AdminWorkspace} payload Repository details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminWorkspace}
     */
  }, {
    key: 'adminEditWorkspace',
    value: function adminEditWorkspace(workspaceId, payload) {
      return this.adminEditWorkspaceWithHttpInfo(workspaceId, payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Edit a metasource 
     * @param {String} workspaceId id or alias of this workspace
     * @param {String} metaId plugin id for meta
     * @param {module:model/MetaSourceParameters} parameters Meta source parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PydioResponse} and HTTP response
     */
  }, {
    key: 'adminEditWorkspaceFeatureWithHttpInfo',
    value: function adminEditWorkspaceFeatureWithHttpInfo(workspaceId, metaId, parameters) {
      var postBody = parameters;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling adminEditWorkspaceFeature");
      }

      // verify the required parameter 'metaId' is set
      if (metaId === undefined || metaId === null) {
        throw new Error("Missing the required parameter 'metaId' when calling adminEditWorkspaceFeature");
      }

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling adminEditWorkspaceFeature");
      }

      var pathParams = {
        'workspaceId': workspaceId,
        'metaId': metaId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = _modelPydioResponse2['default'];

      return this.apiClient.callApi('/admin/workspaces/{workspaceId}/features/{metaId}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Edit a metasource 
     * @param {String} workspaceId id or alias of this workspace
     * @param {String} metaId plugin id for meta
     * @param {module:model/MetaSourceParameters} parameters Meta source parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PydioResponse}
     */
  }, {
    key: 'adminEditWorkspaceFeature',
    value: function adminEditWorkspaceFeature(workspaceId, metaId, parameters) {
      return this.adminEditWorkspaceFeatureWithHttpInfo(workspaceId, metaId, parameters).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Load detail of a workspace 
     * @param {String} workspaceId Id or Alias / Load detail of this workspace
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.loadFillValues Load additional data to build a form for editing this role
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminWorkspace} and HTTP response
     */
  }, {
    key: 'adminGetWorkspaceWithHttpInfo',
    value: function adminGetWorkspaceWithHttpInfo(workspaceId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling adminGetWorkspace");
      }

      var pathParams = {
        'workspaceId': workspaceId
      };
      var queryParams = {
        'load_fill_values': opts['loadFillValues'],
        'format': opts['format']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = _modelAdminWorkspace2['default'];

      return this.apiClient.callApi('/admin/workspaces/{workspaceId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Load detail of a workspace 
     * @param {String} workspaceId Id or Alias / Load detail of this workspace
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.loadFillValues Load additional data to build a form for editing this role
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminWorkspace}
     */
  }, {
    key: 'adminGetWorkspace',
    value: function adminGetWorkspace(workspaceId, opts) {
      return this.adminGetWorkspaceWithHttpInfo(workspaceId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List Workspaces 
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NodeList} and HTTP response
     */
  }, {
    key: 'adminListWorkspacesWithHttpInfo',
    value: function adminListWorkspacesWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'format': opts['format']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = _modelNodeList2['default'];

      return this.apiClient.callApi('/admin/workspaces', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * List Workspaces 
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NodeList}
     */
  }, {
    key: 'adminListWorkspaces',
    value: function adminListWorkspaces(opts) {
      return this.adminListWorkspacesWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Edit a metasource 
     * @param {String} workspaceId id or alias of this workspace
     * @param {String} metaId plugin id for meta
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PydioResponse} and HTTP response
     */
  }, {
    key: 'adminRemoveWorkspaceFeatureWithHttpInfo',
    value: function adminRemoveWorkspaceFeatureWithHttpInfo(workspaceId, metaId) {
      var postBody = null;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling adminRemoveWorkspaceFeature");
      }

      // verify the required parameter 'metaId' is set
      if (metaId === undefined || metaId === null) {
        throw new Error("Missing the required parameter 'metaId' when calling adminRemoveWorkspaceFeature");
      }

      var pathParams = {
        'workspaceId': workspaceId,
        'metaId': metaId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = _modelPydioResponse2['default'];

      return this.apiClient.callApi('/admin/workspaces/{workspaceId}/features/{metaId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Edit a metasource 
     * @param {String} workspaceId id or alias of this workspace
     * @param {String} metaId plugin id for meta
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PydioResponse}
     */
  }, {
    key: 'adminRemoveWorkspaceFeature',
    value: function adminRemoveWorkspaceFeature(workspaceId, metaId) {
      return this.adminRemoveWorkspaceFeatureWithHttpInfo(workspaceId, metaId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update a workspace by posting JSON data 
     * @param {module:model/AdminWorkspace} payload Repository details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminWorkspace} and HTTP response
     */
  }, {
    key: 'adminUpdateWorkspaceWithHttpInfo',
    value: function adminUpdateWorkspaceWithHttpInfo(payload) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling adminUpdateWorkspace");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = _modelAdminWorkspace2['default'];

      return this.apiClient.callApi('/admin/workspaces', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update a workspace by posting JSON data 
     * @param {module:model/AdminWorkspace} payload Repository details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminWorkspace}
     */
  }, {
    key: 'adminUpdateWorkspace',
    value: function adminUpdateWorkspace(payload) {
      return this.adminUpdateWorkspaceWithHttpInfo(payload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create a new user or a new group with this path. To create a user,  make sure to pass a userPass parameter. Otherwise it will create a  group. 
     * @param {String} path User or group identifier, including full group path
     * @param {module:model/String} resourceType Wether it&#39;s a user or a group
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @param {String} opts.groupLabel Label of the new group if we are creating a group
     * @param {String} opts.userPass Password of the new user if we are creating a user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PydioResponse} and HTTP response
     */
  }, {
    key: 'createPeopleWithHttpInfo',
    value: function createPeopleWithHttpInfo(path, resourceType, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling createPeople");
      }

      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling createPeople");
      }

      var pathParams = {
        'path': path
      };
      var queryParams = {
        'format': opts['format']
      };
      var headerParams = {};
      var formParams = {
        'resourceType': resourceType,
        'groupLabel': opts['groupLabel'],
        'userPass': opts['userPass']
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _modelPydioResponse2['default'];

      return this.apiClient.callApi('/admin/people/{path}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Create a new user or a new group with this path. To create a user,  make sure to pass a userPass parameter. Otherwise it will create a  group. 
     * @param {String} path User or group identifier, including full group path
     * @param {module:model/String} resourceType Wether it&#39;s a user or a group
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @param {String} opts.groupLabel Label of the new group if we are creating a group
     * @param {String} opts.userPass Password of the new user if we are creating a user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PydioResponse}
     */
  }, {
    key: 'createPeople',
    value: function createPeople(path, resourceType, opts) {
      return this.createPeopleWithHttpInfo(path, resourceType, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create a new role with this ID 
     * @param {String} roleId Id of the role to load
     * @param {module:model/Role} role JSON description of the new role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Role} and HTTP response
     */
  }, {
    key: 'createRoleWithHttpInfo',
    value: function createRoleWithHttpInfo(roleId, role) {
      var postBody = role;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling createRole");
      }

      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling createRole");
      }

      var pathParams = {
        'roleId': roleId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _modelRole2['default'];

      return this.apiClient.callApi('/admin/roles/{roleId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Create a new role with this ID 
     * @param {String} roleId Id of the role to load
     * @param {module:model/Role} role JSON description of the new role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Role}
     */
  }, {
    key: 'createRole',
    value: function createRole(roleId, role) {
      return this.createRoleWithHttpInfo(roleId, role).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete Role by Id 
     * @param {String} path User or group identifier, including full group path
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PydioResponse} and HTTP response
     */
  }, {
    key: 'deletePeopleWithHttpInfo',
    value: function deletePeopleWithHttpInfo(path, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deletePeople");
      }

      var pathParams = {
        'path': path
      };
      var queryParams = {
        'format': opts['format']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _modelPydioResponse2['default'];

      return this.apiClient.callApi('/admin/people/{path}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Delete Role by Id 
     * @param {String} path User or group identifier, including full group path
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PydioResponse}
     */
  }, {
    key: 'deletePeople',
    value: function deletePeople(path, opts) {
      return this.deletePeopleWithHttpInfo(path, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete Role by Id 
     * @param {String} roleId Id of the role to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PydioResponse} and HTTP response
     */
  }, {
    key: 'deleteRoleWithHttpInfo',
    value: function deleteRoleWithHttpInfo(roleId) {
      var postBody = null;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling deleteRole");
      }

      var pathParams = {
        'roleId': roleId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _modelPydioResponse2['default'];

      return this.apiClient.callApi('/admin/roles/{roleId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Delete Role by Id 
     * @param {String} roleId Id of the role to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PydioResponse}
     */
  }, {
    key: 'deleteRole',
    value: function deleteRole(roleId) {
      return this.deleteRoleWithHttpInfo(roleId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List roles 
     * @param {String} path User or group identifier, including full group path (optional)
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @param {Boolean} opts.list list children of the current resource (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NodeList} and HTTP response
     */
  }, {
    key: 'getPeopleWithHttpInfo',
    value: function getPeopleWithHttpInfo(path, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getPeople");
      }

      var pathParams = {
        'path': path
      };
      var queryParams = {
        'format': opts['format'],
        'list': opts['list']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = _modelNodeList2['default'];

      return this.apiClient.callApi('/admin/people/{path}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * List roles 
     * @param {String} path User or group identifier, including full group path (optional)
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @param {Boolean} opts.list list children of the current resource (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NodeList}
     */
  }, {
    key: 'getPeople',
    value: function getPeople(path, opts) {
      return this.getPeopleWithHttpInfo(path, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get Role by Id 
     * @param {String} roleId Id of the role to load
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @param {Boolean} opts.loadFillValues Load additional data to build a form for editing this role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Role} and HTTP response
     */
  }, {
    key: 'getRoleWithHttpInfo',
    value: function getRoleWithHttpInfo(roleId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling getRole");
      }

      var pathParams = {
        'roleId': roleId
      };
      var queryParams = {
        'format': opts['format'],
        'load_fill_values': opts['loadFillValues']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _modelRole2['default'];

      return this.apiClient.callApi('/admin/roles/{roleId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get Role by Id 
     * @param {String} roleId Id of the role to load
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @param {Boolean} opts.loadFillValues Load additional data to build a form for editing this role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Role}
     */
  }, {
    key: 'getRole',
    value: function getRole(roleId, opts) {
      return this.getRoleWithHttpInfo(roleId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List roles 
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NodeList} and HTTP response
     */
  }, {
    key: 'getRolesWithHttpInfo',
    value: function getRolesWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'format': opts['format']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = _modelNodeList2['default'];

      return this.apiClient.callApi('/admin/roles', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * List roles 
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NodeList}
     */
  }, {
    key: 'getRoles',
    value: function getRoles(opts) {
      return this.getRolesWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update user or group specific data with this path. Use resourceType parameter to discriminate, and send a parameterName/parameterValue couple to be patched.  Authorized parameterName values are described below, along with the parameterValue corresponding specification:  - For groups   - groupLabel : relabel an existing group - For users   - userPass: change user password   - userProfile: update user profile   - userLock: set/remove a lock on a user. Value must be a lockname:lockvalue string where lockvalue is \&quot;true\&quot; or \&quot;fale\&quot;.   - userRoles: Bunch update roles, eventually reorder them, as a JSON encoded array.   - userAddRole: add a role to the user   - userRemoveRole: remove a role currently applied to the user.   - userPreferences: a JSON associative array of key/values to update.  To edit user/group permissions or parameters, use the role api instead,  using the object specific role_id (AJXP_GRP_/groupPath or AJXP_USR_/userId). 
     * @param {String} path User or group identifier, including full group path
     * @param {module:model/String} resourceType Wether it&#39;s a user or a group
     * @param {module:model/PeoplePatch} patchTuple parameterName / parameterValue association
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PydioResponse} and HTTP response
     */
  }, {
    key: 'patchPeopleWithHttpInfo',
    value: function patchPeopleWithHttpInfo(path, resourceType, patchTuple, opts) {
      opts = opts || {};
      var postBody = patchTuple;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling patchPeople");
      }

      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling patchPeople");
      }

      // verify the required parameter 'patchTuple' is set
      if (patchTuple === undefined || patchTuple === null) {
        throw new Error("Missing the required parameter 'patchTuple' when calling patchPeople");
      }

      var pathParams = {
        'path': path
      };
      var queryParams = {
        'format': opts['format'],
        'resourceType': resourceType
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _modelPydioResponse2['default'];

      return this.apiClient.callApi('/admin/people/{path}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update user or group specific data with this path. Use resourceType parameter to discriminate, and send a parameterName/parameterValue couple to be patched.  Authorized parameterName values are described below, along with the parameterValue corresponding specification:  - For groups   - groupLabel : relabel an existing group - For users   - userPass: change user password   - userProfile: update user profile   - userLock: set/remove a lock on a user. Value must be a lockname:lockvalue string where lockvalue is \&quot;true\&quot; or \&quot;fale\&quot;.   - userRoles: Bunch update roles, eventually reorder them, as a JSON encoded array.   - userAddRole: add a role to the user   - userRemoveRole: remove a role currently applied to the user.   - userPreferences: a JSON associative array of key/values to update.  To edit user/group permissions or parameters, use the role api instead,  using the object specific role_id (AJXP_GRP_/groupPath or AJXP_USR_/userId). 
     * @param {String} path User or group identifier, including full group path
     * @param {module:model/String} resourceType Wether it&#39;s a user or a group
     * @param {module:model/PeoplePatch} patchTuple parameterName / parameterValue association
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Format produced in output (defaults to xml)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PydioResponse}
     */
  }, {
    key: 'patchPeople',
    value: function patchPeople(path, resourceType, patchTuple, opts) {
      return this.patchPeopleWithHttpInfo(path, resourceType, patchTuple, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update the role 
     * @param {String} roleId Id of the role to load
     * @param {module:model/Role} role JSON description of the new role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Role} and HTTP response
     */
  }, {
    key: 'updateRoleWithHttpInfo',
    value: function updateRoleWithHttpInfo(roleId, role) {
      var postBody = role;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling updateRole");
      }

      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling updateRole");
      }

      var pathParams = {
        'roleId': roleId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _modelRole2['default'];

      return this.apiClient.callApi('/admin/roles/{roleId}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update the role 
     * @param {String} roleId Id of the role to load
     * @param {module:model/Role} role JSON description of the new role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Role}
     */
  }, {
    key: 'updateRole',
    value: function updateRole(roleId, role) {
      return this.updateRoleWithHttpInfo(roleId, role).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return ProvisioningApi;
})();

exports['default'] = ProvisioningApi;
module.exports = exports['default'];
