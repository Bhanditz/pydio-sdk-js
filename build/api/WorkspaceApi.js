/**
 * Pydio API V2
 * Access to a Pydio Server. Second version of the API.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _modelInlineResponse2002 = require('../model/InlineResponse2002');

var _modelInlineResponse20022 = _interopRequireDefault(_modelInlineResponse2002);

var _modelInlineResponse2003 = require('../model/InlineResponse2003');

var _modelInlineResponse20032 = _interopRequireDefault(_modelInlineResponse2003);

/**
* Workspace service.
* @module api/WorkspaceApi
* @version 2.0.0
*/

var WorkspaceApi = (function () {

  /**
  * Constructs a new WorkspaceApi. 
  * @alias module:api/WorkspaceApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */

  function WorkspaceApi(apiClient) {
    _classCallCheck(this, WorkspaceApi);

    this.apiClient = apiClient || _ApiClient2['default'].instance;
  }

  /**
   * Sends back all changes since a given sequence ID.    This plugin requires **meta.syncable** active on the workspace. 
   * @param {Number} sequenceId File to upload
   * @param {String} workspaceId Id or Alias of the workspace
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2003>} and HTTP response
   */

  _createClass(WorkspaceApi, [{
    key: 'changesWithHttpInfo',
    value: function changesWithHttpInfo(sequenceId, workspaceId) {
      var postBody = null;

      // verify the required parameter 'sequenceId' is set
      if (sequenceId === undefined || sequenceId === null) {
        throw new Error("Missing the required parameter 'sequenceId' when calling changes");
      }

      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling changes");
      }

      var pathParams = {
        'sequenceId': sequenceId,
        'workspaceId': workspaceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_modelInlineResponse20032['default']];

      return this.apiClient.callApi('/workspaces/{workspaceId}/changes/{sequenceId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Sends back all changes since a given sequence ID.    This plugin requires **meta.syncable** active on the workspace. 
     * @param {Number} sequenceId File to upload
     * @param {String} workspaceId Id or Alias of the workspace
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2003>}
     */
  }, {
    key: 'changes',
    value: function changes(sequenceId, workspaceId) {
      return this.changesWithHttpInfo(sequenceId, workspaceId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get information about the given workspace. Info can be gathered via various plugins. Pass the expected metadata type via the X-Pydio-Ws-Info header. Currently supported values are quota|info|changes 
     * @param {module:model/String} xPydioWSInfo 
     * @param {String} workspaceId Id or Alias of the workspace
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
  }, {
    key: 'getWorkspaceInfoWithHttpInfo',
    value: function getWorkspaceInfoWithHttpInfo(xPydioWSInfo, workspaceId) {
      var postBody = null;

      // verify the required parameter 'xPydioWSInfo' is set
      if (xPydioWSInfo === undefined || xPydioWSInfo === null) {
        throw new Error("Missing the required parameter 'xPydioWSInfo' when calling getWorkspaceInfo");
      }

      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getWorkspaceInfo");
      }

      var pathParams = {
        'workspaceId': workspaceId
      };
      var queryParams = {};
      var headerParams = {
        'X-Pydio-WS-Info': xPydioWSInfo
      };
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _modelInlineResponse20022['default'];

      return this.apiClient.callApi('/workspaces/{workspaceId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get information about the given workspace. Info can be gathered via various plugins. Pass the expected metadata type via the X-Pydio-Ws-Info header. Currently supported values are quota|info|changes 
     * @param {module:model/String} xPydioWSInfo 
     * @param {String} workspaceId Id or Alias of the workspace
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
  }, {
    key: 'getWorkspaceInfo',
    value: function getWorkspaceInfo(xPydioWSInfo, workspaceId) {
      return this.getWorkspaceInfoWithHttpInfo(xPydioWSInfo, workspaceId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return WorkspaceApi;
})();

exports['default'] = WorkspaceApi;
module.exports = exports['default'];
