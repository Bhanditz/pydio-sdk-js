/**
 * Pydio API V2
 * Access to a Pydio Server. Second version of the API.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _AdminWorkspaceInfo = require('./AdminWorkspaceInfo');

var _AdminWorkspaceInfo2 = _interopRequireDefault(_AdminWorkspaceInfo);

/**
* The AdminWorkspace model module.
* @module model/AdminWorkspace
* @version 2.0.0
*/

var AdminWorkspace = (function () {
    /**
    * Constructs a new <code>AdminWorkspace</code>.
    * Parameters of a workspace, as seen by administrator
    * @alias module:model/AdminWorkspace
    * @class
    * @param display {String} Label for this workspace
    * @param accessType {String} plugin name to be used as driver to access the storage. Resulting plugin id is \"access.accessType\".
    */

    function AdminWorkspace(display, accessType) {
        _classCallCheck(this, AdminWorkspace);

        this.id = undefined;
        this.slug = undefined;
        this.display = undefined;
        this.displayStringId = undefined;
        this.accessType = undefined;
        this.writeable = undefined;
        this.isTemplate = undefined;
        this.groupPath = undefined;
        this.parameters = undefined;
        this.features = undefined;
        this.mask = undefined;
        this.info = undefined;

        this['display'] = display;this['accessType'] = accessType;
    }

    /**
    * Constructs a <code>AdminWorkspace</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/AdminWorkspace} obj Optional instance to populate.
    * @return {module:model/AdminWorkspace} The populated <code>AdminWorkspace</code> instance.
    */

    _createClass(AdminWorkspace, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new AdminWorkspace();

                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2['default'].convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('slug')) {
                    obj['slug'] = _ApiClient2['default'].convertToType(data['slug'], 'String');
                }
                if (data.hasOwnProperty('display')) {
                    obj['display'] = _ApiClient2['default'].convertToType(data['display'], 'String');
                }
                if (data.hasOwnProperty('displayStringId')) {
                    obj['displayStringId'] = _ApiClient2['default'].convertToType(data['displayStringId'], 'String');
                }
                if (data.hasOwnProperty('accessType')) {
                    obj['accessType'] = _ApiClient2['default'].convertToType(data['accessType'], 'String');
                }
                if (data.hasOwnProperty('writeable')) {
                    obj['writeable'] = _ApiClient2['default'].convertToType(data['writeable'], 'Boolean');
                }
                if (data.hasOwnProperty('isTemplate')) {
                    obj['isTemplate'] = _ApiClient2['default'].convertToType(data['isTemplate'], 'Boolean');
                }
                if (data.hasOwnProperty('groupPath')) {
                    obj['groupPath'] = _ApiClient2['default'].convertToType(data['groupPath'], 'String');
                }
                if (data.hasOwnProperty('parameters')) {
                    obj['parameters'] = _ApiClient2['default'].convertToType(data['parameters'], Object);
                }
                if (data.hasOwnProperty('features')) {
                    obj['features'] = _ApiClient2['default'].convertToType(data['features'], Object);
                }
                if (data.hasOwnProperty('mask')) {
                    obj['mask'] = _ApiClient2['default'].convertToType(data['mask'], Object);
                }
                if (data.hasOwnProperty('info')) {
                    obj['info'] = _AdminWorkspaceInfo2['default'].constructFromObject(data['info']);
                }
            }
            return obj;
        }

        /**
        * Id of this workspace
        * @member {String} id
        */
    }]);

    return AdminWorkspace;
})();

exports['default'] = AdminWorkspace;
module.exports = exports['default'];

/**
* human readable identifier, computed from display
* @member {String} slug
*/

/**
* Label for this workspace
* @member {String} display
*/

/**
* an i18n identifier to adapt the label to the user language
* @member {String} displayStringId
*/

/**
* plugin name to be used as driver to access the storage. Resulting plugin id is \"access.accessType\".
* @member {String} accessType
*/

/**
* wether this workspace/template is writeable or not (not writeable if defined in bootstrap php configs).
* @member {Boolean} writeable
*/

/**
* wether this is a template or a concrete workspace.
* @member {Boolean} isTemplate
*/

/**
* If this repository has a groupPath
* @member {String} groupPath
*/

/**
* a key/value object containing all driver parameters.
* @member {Object} parameters
*/

/**
* The additional features parameters.
* @member {Object} features
*/

/**
* permission mask applied on workspace files and folders
* @member {Object} mask
*/

/**
* @member {module:model/AdminWorkspaceInfo} info
*/
