/**
 * Pydio API V2
 * Access to a Pydio Server. Second version of the API.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _NodeList = require('./NodeList');

var _NodeList2 = _interopRequireDefault(_NodeList);

/**
* The Node model module.
* @module model/Node
* @version 2.0.0
*/

var Node = (function () {
    /**
    * Constructs a new <code>Node</code>.
    * A file or folder represented as a generic resource, including metadata and children. Properties before children are part of the \&quot;standard\&quot; metadat set, properties after are returned by the \&quot;extended\&quot; metadata set.
    * @alias module:model/Node
    * @class
    */

    function Node() {
        _classCallCheck(this, Node);

        this.path = undefined;
        this.type = undefined;
        this.is_leaf = undefined;
        this.label = undefined;
        this.ajxp_modiftime = undefined;
        this.bytesize = undefined;
        this.stat = undefined;
        this.ajxp_relativetime = undefined;
        this.ajxp_description = undefined;
        this.icon = undefined;
        this.filesize = undefined;
        this.mimestring_id = undefined;
        this.ajxp_readonly = undefined;
        this.file_perms = undefined;
        this.repo_has_recycle = undefined;
        this.children = undefined;
    }

    /**
    * Constructs a <code>Node</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Node} obj Optional instance to populate.
    * @return {module:model/Node} The populated <code>Node</code> instance.
    */

    _createClass(Node, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new Node();

                if (data.hasOwnProperty('path')) {
                    obj['path'] = _ApiClient2['default'].convertToType(data['path'], 'String');
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2['default'].convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('is_leaf')) {
                    obj['is_leaf'] = _ApiClient2['default'].convertToType(data['is_leaf'], 'Boolean');
                }
                if (data.hasOwnProperty('label')) {
                    obj['label'] = _ApiClient2['default'].convertToType(data['label'], 'String');
                }
                if (data.hasOwnProperty('ajxp_modiftime')) {
                    obj['ajxp_modiftime'] = _ApiClient2['default'].convertToType(data['ajxp_modiftime'], 'Number');
                }
                if (data.hasOwnProperty('bytesize')) {
                    obj['bytesize'] = _ApiClient2['default'].convertToType(data['bytesize'], 'Number');
                }
                if (data.hasOwnProperty('stat')) {
                    obj['stat'] = _ApiClient2['default'].convertToType(data['stat'], Object);
                }
                if (data.hasOwnProperty('ajxp_relativetime')) {
                    obj['ajxp_relativetime'] = _ApiClient2['default'].convertToType(data['ajxp_relativetime'], 'String');
                }
                if (data.hasOwnProperty('ajxp_description')) {
                    obj['ajxp_description'] = _ApiClient2['default'].convertToType(data['ajxp_description'], 'String');
                }
                if (data.hasOwnProperty('icon')) {
                    obj['icon'] = _ApiClient2['default'].convertToType(data['icon'], 'String');
                }
                if (data.hasOwnProperty('filesize')) {
                    obj['filesize'] = _ApiClient2['default'].convertToType(data['filesize'], 'String');
                }
                if (data.hasOwnProperty('mimestring_id')) {
                    obj['mimestring_id'] = _ApiClient2['default'].convertToType(data['mimestring_id'], 'String');
                }
                if (data.hasOwnProperty('ajxp_readonly')) {
                    obj['ajxp_readonly'] = _ApiClient2['default'].convertToType(data['ajxp_readonly'], 'Boolean');
                }
                if (data.hasOwnProperty('file_perms')) {
                    obj['file_perms'] = _ApiClient2['default'].convertToType(data['file_perms'], 'String');
                }
                if (data.hasOwnProperty('repo_has_recycle')) {
                    obj['repo_has_recycle'] = _ApiClient2['default'].convertToType(data['repo_has_recycle'], 'Boolean');
                }
                if (data.hasOwnProperty('children')) {
                    obj['children'] = _NodeList2['default'].constructFromObject(data['children']);
                }
            }
            return obj;
        }

        /**
        * @member {String} path
        */
    }, {
        key: 'TypeEnum',

        /**
        * Allowed values for the <code>type</code> property.
        * @enum {String}
        * @readonly
        */
        value: {

            /**
             * value: "collection"
             * @const
             */
            "collection": "collection",

            /**
             * value: "leaf"
             * @const
             */
            "leaf": "leaf"
        },
        enumerable: true
    }]);

    return Node;
})();

exports['default'] = Node;
module.exports = exports['default'];

/**
* @member {module:model/Node.TypeEnum} type
*/

/**
* @member {Boolean} is_leaf
*/

/**
* @member {String} label
*/

/**
* @member {Number} ajxp_modiftime
*/

/**
* @member {Number} bytesize
*/

/**
* @member {Object} stat
*/

/**
* @member {String} ajxp_relativetime
*/

/**
* @member {String} ajxp_description
*/

/**
* @member {String} icon
*/

/**
* @member {String} filesize
*/

/**
* @member {String} mimestring_id
*/

/**
* @member {Boolean} ajxp_readonly
*/

/**
* @member {String} file_perms
*/

/**
* @member {Boolean} repo_has_recycle
*/

/**
* @member {module:model/NodeList} children
*/
