/**
 * Pydio API V2
 * Access to a Pydio Server. Second version of the API.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InputStream from '../model/InputStream';
import NodeList from '../model/NodeList';
import PydioResponse from '../model/PydioResponse';

/**
* File service.
* @module api/FileApi
* @version 2.0.0
*/
export default class FileApi {

    /**
    * Constructs a new FileApi. 
    * @alias module:api/FileApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create new resources or move/copy existing resources: + Create a new folder (pass a path **with a trailing slash**), or a new empty file (no trailing slash). + Copy a resource to a new destination: pass destination as {path}, and origin via copy_from parameter. + Rename / Move a resource : basically a copy operation followed by a delete of original 
     * @param {String} path Workspace id or alias + full path to the node, e.g. \&quot;/my-files/path/to/node\&quot;
     * @param {Object} opts Optional parameters
     * @param {String} opts.copySource If it&#39;s a move or a copy, indicated the path of the original node. Path must contain the original workspace Id, as it can be used for cross repository copy as well.
     * @param {Boolean} opts.deleteSource If it&#39;s a move/rename, will remove original after copy operation
     * @param {Boolean} opts.override Ignore existing resource and override it (default to false)
     * @param {Boolean} opts.recursive For directories, create parents if necessary (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PydioResponse} and HTTP response
     */
    createNodeWithHttpInfo(path, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling createNode");
      }


      let pathParams = {
        'path': path
      };
      let queryParams = {
        'copy_source': opts['copySource'],
        'delete_source': opts['deleteSource'],
        'override': opts['override'],
        'recursive': opts['recursive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PydioResponse;

      return this.apiClient.callApi(
        '/fs/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create new resources or move/copy existing resources: + Create a new folder (pass a path **with a trailing slash**), or a new empty file (no trailing slash). + Copy a resource to a new destination: pass destination as {path}, and origin via copy_from parameter. + Rename / Move a resource : basically a copy operation followed by a delete of original 
     * @param {String} path Workspace id or alias + full path to the node, e.g. \&quot;/my-files/path/to/node\&quot;
     * @param {Object} opts Optional parameters
     * @param {String} opts.copySource If it&#39;s a move or a copy, indicated the path of the original node. Path must contain the original workspace Id, as it can be used for cross repository copy as well.
     * @param {Boolean} opts.deleteSource If it&#39;s a move/rename, will remove original after copy operation
     * @param {Boolean} opts.override Ignore existing resource and override it (default to false)
     * @param {Boolean} opts.recursive For directories, create parents if necessary (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PydioResponse}
     */
    createNode(path, opts) {
      return this.createNodeWithHttpInfo(path, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete existing resource 
     * @param {String} path Workspace id or alias + full path to the node, e.g. \&quot;/my-files/path/to/node\&quot;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PydioResponse} and HTTP response
     */
    deleteNodeWithHttpInfo(path) {
      let postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteNode");
      }


      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PydioResponse;

      return this.apiClient.callApi(
        '/fs/{path}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete existing resource 
     * @param {String} path Workspace id or alias + full path to the node, e.g. \&quot;/my-files/path/to/node\&quot;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PydioResponse}
     */
    deleteNode(path) {
      return this.deleteNodeWithHttpInfo(path)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get resource content. Depending on the attachment parameter, will try to either trigger a download, or send binary stream with appropriate headers. Depending on the active plugins, may be able to serve: + Plain text + MP3/Wav Stream + MP4 Stream + On-the-fly generated images + On-the-fly generated thumbnails for images or pdf 
     * @param {String} path Workspace id or alias + full path to the node, e.g. \&quot;/my-files/path/to/node\&quot;
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.attachment if set, send back a force-download, otherwise use Accept header to try to find the best response Content-Type.
     * @param {String} opts.additionalParameters some plugin can take more parameters to send various contents derived from main resource. For example, for images, you can pass get_thumb &amp; dimension 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadWithHttpInfo(path, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling download");
      }


      let pathParams = {
        'path': path
      };
      let queryParams = {
        'attachment': opts['attachment'],
        'additional_parameters': opts['additionalParameters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;

      return this.apiClient.callApi(
        '/io/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get resource content. Depending on the attachment parameter, will try to either trigger a download, or send binary stream with appropriate headers. Depending on the active plugins, may be able to serve: + Plain text + MP3/Wav Stream + MP4 Stream + On-the-fly generated images + On-the-fly generated thumbnails for images or pdf 
     * @param {String} path Workspace id or alias + full path to the node, e.g. \&quot;/my-files/path/to/node\&quot;
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.attachment if set, send back a force-download, otherwise use Accept header to try to find the best response Content-Type.
     * @param {String} opts.additionalParameters some plugin can take more parameters to send various contents derived from main resource. For example, for images, you can pass get_thumb &amp; dimension 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    download(path, opts) {
      return this.downloadWithHttpInfo(path, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information about a node and its metadata. By default, it will return  Pydio \&quot;primary\&quot; metadata (stat, internal informations). Extended metadata can be added by some plugins.   For collections (folders), pass the **children** parameter to list its content.   To access the actual content of the nodes, see the I/O API. 
     * @param {String} path Workspace id or alias + full path to the node, e.g. \&quot;/my-files/path/to/node\&quot;
     * @param {module:model/String} meta Level of precision for expected metadata
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.children Load children if node is a collection
     * @param {Boolean} opts.recursive If requiring children, load grandchildren recursively
     * @param {Number} opts.maxDepth If requiring children recursively, stop at the given depth. If -1, no limit. (default to -1)
     * @param {Number} opts.maxNodes If requiring children recursively, stop at the given depth. If -1, no limit. (default to -1)
     * @param {Boolean} opts.remoteOrder Apply server-side sorting (default to false)
     * @param {String} opts.orderColumn Order column to use for server-side sorting
     * @param {String} opts.orderDirection Order direction to use for server-side sorting (asc or desc)
     * @param {Boolean} opts.pagePosition For a single file, try to detect the page position in the parent node listing. (default to false)
     * @param {Boolean} opts.xIndexationRequired Invalidate current index and trigger a background indexation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NodeList} and HTTP response
     */
    getNodeInfosWithHttpInfo(path, meta, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getNodeInfos");
      }

      // verify the required parameter 'meta' is set
      if (meta === undefined || meta === null) {
        throw new Error("Missing the required parameter 'meta' when calling getNodeInfos");
      }


      let pathParams = {
        'path': path
      };
      let queryParams = {
        'meta': meta,
        'children': opts['children']
      };
      let headerParams = {
        'X-Indexation-Required': opts['xIndexationRequired']
      };
      let formParams = {
        'recursive': opts['recursive'],
        'max_depth': opts['maxDepth'],
        'max_nodes': opts['maxNodes'],
        'remote_order': opts['remoteOrder'],
        'order_column': opts['orderColumn'],
        'order_direction': opts['orderDirection'],
        'page_position': opts['pagePosition']
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = NodeList;

      return this.apiClient.callApi(
        '/fs/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get information about a node and its metadata. By default, it will return  Pydio \&quot;primary\&quot; metadata (stat, internal informations). Extended metadata can be added by some plugins.   For collections (folders), pass the **children** parameter to list its content.   To access the actual content of the nodes, see the I/O API. 
     * @param {String} path Workspace id or alias + full path to the node, e.g. \&quot;/my-files/path/to/node\&quot;
     * @param {module:model/String} meta Level of precision for expected metadata
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.children Load children if node is a collection
     * @param {Boolean} opts.recursive If requiring children, load grandchildren recursively
     * @param {Number} opts.maxDepth If requiring children recursively, stop at the given depth. If -1, no limit. (default to -1)
     * @param {Number} opts.maxNodes If requiring children recursively, stop at the given depth. If -1, no limit. (default to -1)
     * @param {Boolean} opts.remoteOrder Apply server-side sorting (default to false)
     * @param {String} opts.orderColumn Order column to use for server-side sorting
     * @param {String} opts.orderDirection Order direction to use for server-side sorting (asc or desc)
     * @param {Boolean} opts.pagePosition For a single file, try to detect the page position in the parent node listing. (default to false)
     * @param {Boolean} opts.xIndexationRequired Invalidate current index and trigger a background indexation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NodeList}
     */
    getNodeInfos(path, meta, opts) {
      return this.getNodeInfosWithHttpInfo(path, meta, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update existing resources metadata (see I/O for content modification). Basic metadata is provided by core plugins, but they can be extended by other plugins. For example : &#x60;{\&quot;core\&quot;: {\&quot;chmod\&quot;: 777}}, {\&quot;user_meta\&quot;:[{\&quot;metaName\&quot;:\&quot;metaValue\&quot;}]}&#x60; &#x60;{\&quot;bookmarks\&quot;:{\&quot;bookmarked\&quot;: true}, \&quot;locks\&quot;:{\&quot;locked\&quot;:true}, \&quot;meta.watch\&quot;:{\&quot;watch\&quot;:true}}&#x60; etc... 
     * @param {String} path Workspace id or alias + full path to the node, e.g. \&quot;/my-files/path/to/node\&quot;
     * @param {String} metadata Json-serialized metadata to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PydioResponse} and HTTP response
     */
    updateNodeWithHttpInfo(path, metadata) {
      let postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling updateNode");
      }

      // verify the required parameter 'metadata' is set
      if (metadata === undefined || metadata === null) {
        throw new Error("Missing the required parameter 'metadata' when calling updateNode");
      }


      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'metadata': metadata
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PydioResponse;

      return this.apiClient.callApi(
        '/fs/{path}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update existing resources metadata (see I/O for content modification). Basic metadata is provided by core plugins, but they can be extended by other plugins. For example : &#x60;{\&quot;core\&quot;: {\&quot;chmod\&quot;: 777}}, {\&quot;user_meta\&quot;:[{\&quot;metaName\&quot;:\&quot;metaValue\&quot;}]}&#x60; &#x60;{\&quot;bookmarks\&quot;:{\&quot;bookmarked\&quot;: true}, \&quot;locks\&quot;:{\&quot;locked\&quot;:true}, \&quot;meta.watch\&quot;:{\&quot;watch\&quot;:true}}&#x60; etc... 
     * @param {String} path Workspace id or alias + full path to the node, e.g. \&quot;/my-files/path/to/node\&quot;
     * @param {String} metadata Json-serialized metadata to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PydioResponse}
     */
    updateNode(path, metadata) {
      return this.updateNodeWithHttpInfo(path, metadata)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create or update resource by posting to Input Stream 
     * @param {String} path Workspace id or alias + full path to the node, e.g. \&quot;/my-files/path/to/node\&quot;
     * @param {module:model/InputStream} raw binary data
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xRenameIfExists Automatically increment filename if it already exists
     * @param {String} opts.xAppendTo Append uploaded data at the end of existing file
     * @param {Boolean} opts.xPartialUpload If the current put is a part of a file. If set, the X-Partial-Target-Bytesize header is required.
     * @param {Number} opts.xPartialTargetBytesize In case of partial upload, the size of the full file as expected at the end of upload.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PydioResponse} and HTTP response
     */
    uploadStreamWithHttpInfo(path, raw, opts) {
      opts = opts || {};
      let postBody = raw;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling uploadStream");
      }

      // verify the required parameter 'raw' is set
      if (raw === undefined || raw === null) {
        throw new Error("Missing the required parameter 'raw' when calling uploadStream");
      }


      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Rename-If-Exists': opts['xRenameIfExists'],
        'X-Append-To': opts['xAppendTo'],
        'X-Partial-Upload': opts['xPartialUpload'],
        'X-Partial-Target-Bytesize': opts['xPartialTargetBytesize']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = PydioResponse;

      return this.apiClient.callApi(
        '/io/{path}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create or update resource by posting to Input Stream 
     * @param {String} path Workspace id or alias + full path to the node, e.g. \&quot;/my-files/path/to/node\&quot;
     * @param {module:model/InputStream} raw binary data
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xRenameIfExists Automatically increment filename if it already exists
     * @param {String} opts.xAppendTo Append uploaded data at the end of existing file
     * @param {Boolean} opts.xPartialUpload If the current put is a part of a file. If set, the X-Partial-Target-Bytesize header is required.
     * @param {Number} opts.xPartialTargetBytesize In case of partial upload, the size of the full file as expected at the end of upload.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PydioResponse}
     */
    uploadStream(path, raw, opts) {
      return this.uploadStreamWithHttpInfo(path, raw, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
