/**
 * Pydio API V2
 * Access to a Pydio Server. Second version of the API.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Task from '../model/Task';

/**
* Task service.
* @module api/TaskApi
* @version 2.0.0
*/
export default class TaskApi {

    /**
    * Constructs a new TaskApi. 
    * @alias module:api/TaskApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a task on the server. This will generally trigger a server-side background \&quot;Task\&quot;, which ID will be returned in the PydioResponse[&#39;tasks&#39;] array 
     * @param {String} taskId Task to launch on the server
     * @param {Object} opts Optional parameters
     * @param {module:model/Task} opts.requestBody JSON Task object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Task} and HTTP response
     */
    createTaskWithHttpInfo(taskId, opts) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling createTask");
      }


      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = Task;

      return this.apiClient.callApi(
        '/tasks/{taskId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a task on the server. This will generally trigger a server-side background \&quot;Task\&quot;, which ID will be returned in the PydioResponse[&#39;tasks&#39;] array 
     * @param {String} taskId Task to launch on the server
     * @param {Object} opts Optional parameters
     * @param {module:model/Task} opts.requestBody JSON Task object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Task}
     */
    createTask(taskId, opts) {
      return this.createTaskWithHttpInfo(taskId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a task on the server. 
     * @param {String} taskId Task to delete on the server
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Task} and HTTP response
     */
    deleteTaskWithHttpInfo(taskId) {
      let postBody = null;

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling deleteTask");
      }


      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Task;

      return this.apiClient.callApi(
        '/tasks/{taskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a task on the server. 
     * @param {String} taskId Task to delete on the server
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Task}
     */
    deleteTask(taskId) {
      return this.deleteTaskWithHttpInfo(taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information about a currently running task Id 
     * @param {String} taskId Task to monitor on the server
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Task} and HTTP response
     */
    getTaskInfoWithHttpInfo(taskId) {
      let postBody = null;

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getTaskInfo");
      }


      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Task;

      return this.apiClient.callApi(
        '/tasks/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get information about a currently running task Id 
     * @param {String} taskId Task to monitor on the server
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Task}
     */
    getTaskInfo(taskId) {
      return this.getTaskInfoWithHttpInfo(taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List tasks currently running on the server (and visible to the current user). 
     * @param {String} workspaceId Id or Alias of the workspace
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter additional filters for task listing (JSON serialized)
     * @param {Array.<String>} opts.path One or more node pathes
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Task>} and HTTP response
     */
    listTasksWithHttpInfo(workspaceId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling listTasks");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'filter': opts['filter'],
        'workspaceId': workspaceId,
        'path': this.apiClient.buildCollectionParam(opts['path'], 'multi')
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = [Task];

      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List tasks currently running on the server (and visible to the current user). 
     * @param {String} workspaceId Id or Alias of the workspace
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter additional filters for task listing (JSON serialized)
     * @param {Array.<String>} opts.path One or more node pathes
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Task>}
     */
    listTasks(workspaceId, opts) {
      return this.listTasksWithHttpInfo(workspaceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a task on the server. 
     * @param {String} taskId Task to update on the server
     * @param {Object} opts Optional parameters
     * @param {module:model/Task} opts.requestBody JSON Diff describing the patches to apply on the task object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Task} and HTTP response
     */
    updateTaskWithHttpInfo(taskId, opts) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling updateTask");
      }


      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = Task;

      return this.apiClient.callApi(
        '/tasks/{taskId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a task on the server. 
     * @param {String} taskId Task to update on the server
     * @param {Object} opts Optional parameters
     * @param {module:model/Task} opts.requestBody JSON Diff describing the patches to apply on the task object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Task}
     */
    updateTask(taskId, opts) {
      return this.updateTaskWithHttpInfo(taskId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
