/**
 * Pydio API V2
 * Access to a Pydio Server. Second version of the API.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AdminWorkspace from './model/AdminWorkspace';
import AdminWorkspaceInfo from './model/AdminWorkspaceInfo';
import BgAction from './model/BgAction';
import InlineResponse200 from './model/InlineResponse200';
import InlineResponse2001 from './model/InlineResponse2001';
import InlineResponse2002 from './model/InlineResponse2002';
import InlineResponse2003 from './model/InlineResponse2003';
import InputStream from './model/InputStream';
import MetaSourceParameters from './model/MetaSourceParameters';
import Node from './model/Node';
import NodeList from './model/NodeList';
import NodeListData from './model/NodeListData';
import NodesDiff from './model/NodesDiff';
import PaginationData from './model/PaginationData';
import PeoplePatch from './model/PeoplePatch';
import PydioResponse from './model/PydioResponse';
import Role from './model/Role';
import Task from './model/Task';
import TaskSchedule from './model/TaskSchedule';
import FileApi from './api/FileApi';
import ProvisioningApi from './api/ProvisioningApi';
import TaskApi from './api/TaskApi';
import UserAccountApi from './api/UserAccountApi';
import WorkspaceApi from './api/WorkspaceApi';


/**
* Access_to_a_Pydio_Server__Second_version_of_the_API_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var PydioApiV2 = require('index'); // See note below*.
* var xxxSvc = new PydioApiV2.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new PydioApiV2.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new PydioApiV2.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new PydioApiV2.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AdminWorkspace model constructor.
     * @property {module:model/AdminWorkspace}
     */
    AdminWorkspace,

    /**
     * The AdminWorkspaceInfo model constructor.
     * @property {module:model/AdminWorkspaceInfo}
     */
    AdminWorkspaceInfo,

    /**
     * The BgAction model constructor.
     * @property {module:model/BgAction}
     */
    BgAction,

    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200,

    /**
     * The InlineResponse2001 model constructor.
     * @property {module:model/InlineResponse2001}
     */
    InlineResponse2001,

    /**
     * The InlineResponse2002 model constructor.
     * @property {module:model/InlineResponse2002}
     */
    InlineResponse2002,

    /**
     * The InlineResponse2003 model constructor.
     * @property {module:model/InlineResponse2003}
     */
    InlineResponse2003,

    /**
     * The InputStream model constructor.
     * @property {module:model/InputStream}
     */
    InputStream,

    /**
     * The MetaSourceParameters model constructor.
     * @property {module:model/MetaSourceParameters}
     */
    MetaSourceParameters,

    /**
     * The Node model constructor.
     * @property {module:model/Node}
     */
    Node,

    /**
     * The NodeList model constructor.
     * @property {module:model/NodeList}
     */
    NodeList,

    /**
     * The NodeListData model constructor.
     * @property {module:model/NodeListData}
     */
    NodeListData,

    /**
     * The NodesDiff model constructor.
     * @property {module:model/NodesDiff}
     */
    NodesDiff,

    /**
     * The PaginationData model constructor.
     * @property {module:model/PaginationData}
     */
    PaginationData,

    /**
     * The PeoplePatch model constructor.
     * @property {module:model/PeoplePatch}
     */
    PeoplePatch,

    /**
     * The PydioResponse model constructor.
     * @property {module:model/PydioResponse}
     */
    PydioResponse,

    /**
     * The Role model constructor.
     * @property {module:model/Role}
     */
    Role,

    /**
     * The Task model constructor.
     * @property {module:model/Task}
     */
    Task,

    /**
     * The TaskSchedule model constructor.
     * @property {module:model/TaskSchedule}
     */
    TaskSchedule,

    /**
    * The FileApi service constructor.
    * @property {module:api/FileApi}
    */
    FileApi,

    /**
    * The ProvisioningApi service constructor.
    * @property {module:api/ProvisioningApi}
    */
    ProvisioningApi,

    /**
    * The TaskApi service constructor.
    * @property {module:api/TaskApi}
    */
    TaskApi,

    /**
    * The UserAccountApi service constructor.
    * @property {module:api/UserAccountApi}
    */
    UserAccountApi,

    /**
    * The WorkspaceApi service constructor.
    * @property {module:api/WorkspaceApi}
    */
    WorkspaceApi
};
