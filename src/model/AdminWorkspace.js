/**
 * Pydio API V2
 * Access to a Pydio Server. Second version of the API.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import AdminWorkspaceInfo from './AdminWorkspaceInfo';





/**
* The AdminWorkspace model module.
* @module model/AdminWorkspace
* @version 2.0.0
*/
export default class AdminWorkspace {
    /**
    * Constructs a new <code>AdminWorkspace</code>.
    * Parameters of a workspace, as seen by administrator
    * @alias module:model/AdminWorkspace
    * @class
    * @param display {String} Label for this workspace
    * @param accessType {String} plugin name to be used as driver to access the storage. Resulting plugin id is \"access.accessType\".
    */

    constructor(display, accessType) {
        

        
        

        this['display'] = display;this['accessType'] = accessType;

        
    }

    /**
    * Constructs a <code>AdminWorkspace</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/AdminWorkspace} obj Optional instance to populate.
    * @return {module:model/AdminWorkspace} The populated <code>AdminWorkspace</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdminWorkspace();

            
            
            

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('displayStringId')) {
                obj['displayStringId'] = ApiClient.convertToType(data['displayStringId'], 'String');
            }
            if (data.hasOwnProperty('accessType')) {
                obj['accessType'] = ApiClient.convertToType(data['accessType'], 'String');
            }
            if (data.hasOwnProperty('writeable')) {
                obj['writeable'] = ApiClient.convertToType(data['writeable'], 'Boolean');
            }
            if (data.hasOwnProperty('isTemplate')) {
                obj['isTemplate'] = ApiClient.convertToType(data['isTemplate'], 'Boolean');
            }
            if (data.hasOwnProperty('groupPath')) {
                obj['groupPath'] = ApiClient.convertToType(data['groupPath'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], Object);
            }
            if (data.hasOwnProperty('mask')) {
                obj['mask'] = ApiClient.convertToType(data['mask'], Object);
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = AdminWorkspaceInfo.constructFromObject(data['info']);
            }
        }
        return obj;
    }

    /**
    * Id of this workspace
    * @member {String} id
    */
    id = undefined;
    /**
    * human readable identifier, computed from display
    * @member {String} slug
    */
    slug = undefined;
    /**
    * Label for this workspace
    * @member {String} display
    */
    display = undefined;
    /**
    * an i18n identifier to adapt the label to the user language
    * @member {String} displayStringId
    */
    displayStringId = undefined;
    /**
    * plugin name to be used as driver to access the storage. Resulting plugin id is \"access.accessType\".
    * @member {String} accessType
    */
    accessType = undefined;
    /**
    * wether this workspace/template is writeable or not (not writeable if defined in bootstrap php configs).
    * @member {Boolean} writeable
    */
    writeable = undefined;
    /**
    * wether this is a template or a concrete workspace.
    * @member {Boolean} isTemplate
    */
    isTemplate = undefined;
    /**
    * If this repository has a groupPath
    * @member {String} groupPath
    */
    groupPath = undefined;
    /**
    * a key/value object containing all driver parameters.
    * @member {Object} parameters
    */
    parameters = undefined;
    /**
    * The additional features parameters.
    * @member {Object} features
    */
    features = undefined;
    /**
    * permission mask applied on workspace files and folders
    * @member {Object} mask
    */
    mask = undefined;
    /**
    * @member {module:model/AdminWorkspaceInfo} info
    */
    info = undefined;








}


