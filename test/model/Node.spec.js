/**
 * Pydio API V2
 * Access to a Pydio Server. Second version of the API.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PydioApiV2);
  }
}(this, function(expect, PydioApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PydioApiV2.Node();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Node', function() {
    it('should create an instance of Node', function() {
      // uncomment below and update the code to test Node
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be.a(PydioApiV2.Node);
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property isLeaf (base name: "is_leaf")', function() {
      // uncomment below and update the code to test the property isLeaf
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property label (base name: "label")', function() {
      // uncomment below and update the code to test the property label
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property ajxpModiftime (base name: "ajxp_modiftime")', function() {
      // uncomment below and update the code to test the property ajxpModiftime
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property bytesize (base name: "bytesize")', function() {
      // uncomment below and update the code to test the property bytesize
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property stat (base name: "stat")', function() {
      // uncomment below and update the code to test the property stat
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property ajxpRelativetime (base name: "ajxp_relativetime")', function() {
      // uncomment below and update the code to test the property ajxpRelativetime
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property ajxpDescription (base name: "ajxp_description")', function() {
      // uncomment below and update the code to test the property ajxpDescription
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property icon (base name: "icon")', function() {
      // uncomment below and update the code to test the property icon
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property filesize (base name: "filesize")', function() {
      // uncomment below and update the code to test the property filesize
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property mimestringId (base name: "mimestring_id")', function() {
      // uncomment below and update the code to test the property mimestringId
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property ajxpReadonly (base name: "ajxp_readonly")', function() {
      // uncomment below and update the code to test the property ajxpReadonly
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property filePerms (base name: "file_perms")', function() {
      // uncomment below and update the code to test the property filePerms
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property repoHasRecycle (base name: "repo_has_recycle")', function() {
      // uncomment below and update the code to test the property repoHasRecycle
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

    it('should have the property children (base name: "children")', function() {
      // uncomment below and update the code to test the property children
      //var instane = new PydioApiV2.Node();
      //expect(instance).to.be();
    });

  });

}));
